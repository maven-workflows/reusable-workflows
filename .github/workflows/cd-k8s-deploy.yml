name: Deploy to Container Apps

on:
  workflow_call:
    secrets:
      AZURE_CREDENTIALS:
        description: 'JSON do Service Principal para fazer login no Azure'
        required: true

env:
  ARTIFACT_NAME: "app-jar"        # nome do artifact que contém o JAR
  RESOURCE_GROUP: "azure-for-github-actions"
  ACR_NAME: "ghactions"
  ENV_NAME: "ghactions-env"
  CA_NAME: "ghactions-ca"
  IMAGE_NAME: "demo-api"
  LOCATION: "eastus2"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ------------------------------------------------------
      # 1) Download do JAR que foi publicado como artifact no build
      # ------------------------------------------------------
      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./app-jar

      # ------------------------------------------------------
      # 2) Login no Azure (Service Principal)
      # ------------------------------------------------------
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # ------------------------------------------------------
      # 3) Cria o Dockerfile “na mão” antes de rodar o build
      # ------------------------------------------------------
      - name: Criar Dockerfile
        run: |
          cat << 'EOF' > Dockerfile
          FROM openjdk:11-jre-slim

          # Copia qualquer JAR que esteja dentro de app-jar/ direto para /app.jar
          COPY app-jar/*.jar /app.jar

          WORKDIR /

          EXPOSE 8080

          ENTRYPOINT ["java", "-jar", "/app.jar"]
          EOF


      # ------------------------------------------------------
      # 4) Build & Push da imagem Docker (usa o JAR baixado em ./app-jar)
      # ------------------------------------------------------
      - name: Build & Push Docker Image
        run: |
          echo "Conteúdo de ./app-jar:"
          ls -l ./app-jar
          echo "Conteúdo da raiz (deve ter Dockerfile):"
          ls -l .
            
          # Não precisamos mais de --build-arg, pois o Dockerfile já faz glob em app-jar/*.jar
          docker build \
            -f Dockerfile \
            -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            .
            
          az acr login --name ${{ env.ACR_NAME }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}



      # ------------------------------------------------------
      # 5) Cria (se ainda não existir) o Log Analytics Workspace
      # ------------------------------------------------------
      - name: Create Log Analytics Workspace (if not exists)
        run: |
          az monitor log-analytics workspace create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --workspace-name ${{ env.ENV_NAME }}-logs \
            --location ${{ env.LOCATION }}

      # ------------------------------------------------------
      # 6) Cria (se ainda não existir) o Container Apps Environment
      # ------------------------------------------------------
      - name: Create Container Apps Environment (if not exists)
        run: |
          if ! az containerapp env show \
               --name ${{ env.ENV_NAME }} \
               --resource-group ${{ env.RESOURCE_GROUP }} \
             > /dev/null 2>&1; then
            az containerapp env create \
              --name ${{ env.ENV_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --location ${{ env.LOCATION }} \
              --logs-workspace-name ${{ env.ENV_NAME }}-logs
          fi

      # ------------------------------------------------------
      # 7) Cria ou Atualiza o Container App, usando a nova imagem
      # ------------------------------------------------------
      - name: Create or Update Container App
        run: |
          if ! az containerapp show \
               --name ${{ env.CA_NAME }} \
               --resource-group ${{ env.RESOURCE_GROUP }} \
             > /dev/null 2>&1; then
            az containerapp create \
              --name ${{ env.CA_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --environment ${{ env.ENV_NAME }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
              --ingress external \
              --target-port 8080 \
              --min-replicas 0 \
              --max-replicas 2 \
              --registry-server ${{ env.ACR_NAME }}.azurecr.io
          else
            az containerapp update \
              --name ${{ env.CA_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --environment ${{ env.ENV_NAME }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          fi
