name: Deploy to Azure Container Apps

on:
  workflow_call:
    secrets:
      AZURE_CREDENTIALS:
        description: 'JSON do Service Principal para fazer login no Azure'
        required: true

env:
  ARTIFACT_NAME: "app-jar"
  RESOURCE_GROUP: "azure-for-github-actions"
  ACR_NAME: "ghactions"
  CONTAINER_APP_NAME: "ghactions-ca"
  IMAGE_NAME: "demo-api"
  ENV_NAME: "ghactions-env"
  LOCATION: "eastus2"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./app-jar

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Dockerfile
        run: |
          cat << 'EOF' > Dockerfile
          FROM openjdk:11-jre-slim
          COPY app-jar/*.jar /app.jar
          WORKDIR /
          EXPOSE 8080
          ENTRYPOINT ["java", "-jar", "/app.jar"]
          EOF

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG="${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "ðŸ”¨ Building image $IMAGE_TAG"
          docker build -f Dockerfile -t "$IMAGE_TAG" .

          echo "ðŸ”‘ Logging in to ACR ${{ env.ACR_NAME }}"
          az acr login --name "${{ env.ACR_NAME }}"

          echo "ðŸ“¤ Pushing image to ACR"
          docker push "$IMAGE_TAG"

      - name: Enable ACR admin user
        run: az acr update -n ${{ env.ACR_NAME }} --admin-enabled true

      - name: Get ACR Credentials
        id: acr_creds
        run: |
          ACR_USERNAME=$(az acr credential show --name "${{ env.ACR_NAME }}" --query "username" -o tsv)
          ACR_PASSWORD=$(az acr credential show --name "${{ env.ACR_NAME }}" --query "passwords[0].value" -o tsv)

          echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_OUTPUT

      - name: Install Azure Container Apps Extension
        run: |
          if ! az extension show --name containerapp &> /dev/null; then
            az extension add --name containerapp
          fi

      - name: Deploy to Azure Container Apps
        run: |
          IMAGE_TAG="${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          ACR_LOGIN_SERVER="${{ env.ACR_NAME }}.azurecr.io"
          ACR_USERNAME="${{ steps.acr_creds.outputs.ACR_USERNAME }}"
          ACR_PASSWORD="${{ steps.acr_creds.outputs.ACR_PASSWORD }}"

          az containerapp up \
            --name "${{ env.CONTAINER_APP_NAME }}" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --environment "${{ env.ENV_NAME }}" \
            --image "$IMAGE_TAG" \
            --location "${{ env.LOCATION }}" \
            --ingress external \
            --target-port 8080 \
            --registry-server "$ACR_LOGIN_SERVER" \
            --registry-username "$ACR_USERNAME" \
            --registry-password "$ACR_PASSWORD"
