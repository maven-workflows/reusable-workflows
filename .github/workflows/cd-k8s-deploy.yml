name: Deploy to Azure Container Apps

on:
  workflow_call:
    secrets:
      AZURE_CREDENTIALS:
        description: 'JSON do Service Principal para fazer login no Azure'
        required: true

env:
  ARTIFACT_NAME: "app-jar"                     # Nome do artifact que contém o JAR
  RESOURCE_GROUP: "azure-for-github-actions"   # Resource Group onde residem os recursos
  ACR_NAME: "ghactions"                        # Nome do Azure Container Registry (sem o .azurecr.io)
  CONTAINER_APP_NAME: "ghactions-ca"           # Nome do Container App
  IMAGE_NAME: "demo-api"                       # Nome lógico da imagem (prefixo antes da tag)
  ENV_NAME: "ghactions-env"                    # Nome do Container Apps Environment
  UAMI_NAME: "ghactions-uami"                  # Nome da User-Assigned Managed Identity que será criada
  LOCATION: "eastus2"                          # Região onde os recursos residem

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # -------------------------------
      # 1) Baixar o JAR gerado no build
      # -------------------------------
      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./app-jar

      # -----------------------------------
      # 2) Login no Azure (Service Principal)
      # -----------------------------------
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # ----------------------------------------------------------------
      # 3) Criar (ou recuperar) a User-Assigned Managed Identity (UAMI)
      # ----------------------------------------------------------------
      - name: Create or Get User-Assigned Managed Identity
        id: create_uami
        run: |
          # 1) Tenta criar a UAMI; se já existe, az identity create falhará, então capturamos o ID existente
          set +e
          UAMI_ID=$(az identity show \
            --name ${{ env.UAMI_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query id -o tsv 2>/dev/null)
          set -e

          if [ -z "$UAMI_ID" ]; then
            echo "UAMI '${{ env.UAMI_NAME }}' não existe; criando..."
            UAMI_ID=$(az identity create \
              --name ${{ env.UAMI_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --location ${{ env.LOCATION }} \
              --query id -o tsv)
          else
            echo "UAMI '${{ env.UAMI_NAME }}' já existe: $UAMI_ID"
          fi

          echo "UAMI_ID=$UAMI_ID" >> "$GITHUB_OUTPUT"

      # ----------------------------------------------------
      # 4) Atribuir role AcrPull à UAMI no ACR (se necessário)
      # ----------------------------------------------------
      - name: Grant AcrPull to UAMI on ACR (if needed)
        run: |
          UAMI_ID="${{ steps.create_uami.outputs.UAMI_ID }}"
          # Extrai o principalId (objectId) da UAMI
          UAMI_PRINCIPAL_ID=$(az identity show \
            --ids "$UAMI_ID" \
            --query principalId -o tsv)

          # Descobre o resourceId do ACR
          ACR_RESOURCE_ID=$(az acr show \
            --name "${{ env.ACR_NAME }}" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --query id -o tsv)

          # Verifica se a UAMI já tem a role AcrPull naquele escopo
          EXISTS=$(az role assignment list \
            --assignee-object-id "$UAMI_PRINCIPAL_ID" \
            --scope "$ACR_RESOURCE_ID" \
            --query "[?roleDefinitionName=='AcrPull'] | length(@)" -o tsv)

          if [ "$EXISTS" -eq "0" ]; then
            echo "Atribuindo 'AcrPull' para a UAMI no ACR..."
            az role assignment create \
              --assignee-object-id "$UAMI_PRINCIPAL_ID" \
              --assignee-principal-type ServicePrincipal \
              --role AcrPull \
              --scope "$ACR_RESOURCE_ID"
          else
            echo "UAMI já possui AcrPull no ACR."
          fi

      # ----------------------------------------
      # 5) Criar Dockerfile dinamicamente a partir do JAR
      # ----------------------------------------
      - name: Create Dockerfile
        run: |
          cat << 'EOF' > Dockerfile
          FROM openjdk:11-jre-slim
          COPY app-jar/*.jar /app.jar
          WORKDIR /
          EXPOSE 8080
          ENTRYPOINT ["java", "-jar", "/app.jar"]
          EOF

      # ------------------------------------------------
      # 6) Build & Push da imagem Docker para o ACR
      # ------------------------------------------------
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG="${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "Building image $IMAGE_TAG"
          docker build -f Dockerfile -t "$IMAGE_TAG" .

          echo "Logging in to ACR ${{ env.ACR_NAME }}"
          az acr login --name "${{ env.ACR_NAME }}"

          echo "Pushing image to ACR"
          docker push "$IMAGE_TAG"

      # ------------------------------------------------------------
      # 7) Instalar extensão Container Apps do Azure CLI (caso não exista)
      # ------------------------------------------------------------
      - name: Install Azure Container Apps Extension
        run: |
          if ! az extension show --name containerapp &> /dev/null; then
            az extension add --name containerapp
          fi

      # --------------------------------------------------------------------------------
      # 8) Criar ou Atualizar o Container App com 'az containerapp up' usando a UAMI criada
      #    - Se Container App não existir, cria Environment, Log Analytics e o CA
      #    - Se já existir, atualiza apenas a imagem
      # --------------------------------------------------------------------------------
      - name: Deploy (az containerapp up com User-Assigned Identity)
        run: |
          IMAGE_TAG="${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          UAMI_ID="${{ steps.create_uami.outputs.UAMI_ID }}"

          az containerapp up \
            --name "${{ env.CONTAINER_APP_NAME }}" \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --environment "${{ env.ENV_NAME }}" \
            --image "$IMAGE_TAG" \
            --location "${{ env.LOCATION }}" \
            --ingress external \
            --target-port 8080 \
            --registry-server "${{ env.ACR_NAME }}.azurecr.io" \
            --assign-identity "$UAMI_ID"
