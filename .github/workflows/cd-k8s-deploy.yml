name: Deploy to Container Apps

on:
  workflow_call:
    # Somente o segredo AZURE_CREDENTIALS continua como secret obrigatório
    secrets:
      AZURE_CREDENTIALS:
        description: 'JSON do Service Principal para fazer login no Azure'
        required: true

# ───────────────────────────────────────────────────────────────────────────────────────────
# Aqui, definimos todas as variáveis de configuração como ENVIRONMENT VARIABLES,
# deixando-as “em branco” por padrão. Quem chamar este reusable deverá sobrescrevê-las
# no momento do call, definindo essas mesmas ENV vars no job chamador.
# ───────────────────────────────────────────────────────────────────────────────────────────
env:
  ARTIFACT_NAME: "app-jar"      # (ex: "app-jar")
  RESOURCE_GROUP: "azure-for-github-actions"     # (ex: "meuservicos-rg")
  ACR_NAME: "ghactions"           # (ex: "meuacr")
  ENV_NAME: "ghactions-env"           # (ex: "meuservico-env")
  CA_NAME: "ghactions-ca"            # (ex: "minha-api-ca")
  IMAGE_NAME: "demo-api"         # (ex: "minha-api")
  LOCATION: "eastus2"           # (ex: "brazilsouth")
  
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ------------------------------------------------------
      # 1) Download do JAR que foi publicado como artifact no build
      # ------------------------------------------------------
      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./app-jar

      # ------------------------------------------------------
      # 2) Login no Azure (Service Principal)
      # ------------------------------------------------------
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # ------------------------------------------------------
      # 3) Build & Push da imagem Docker (usa o JAR baixado em ./app-jar)
      # ------------------------------------------------------
      - name: Build & Push Docker Image
        run: |
          # Verifica que o JAR está onde esperamos:
          ls ./app-jar

          # Constrói a imagem usando o JAR baixado:
          docker build \
            -f Dockerfile \
            -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --build-arg JAR_FILE=./app-jar/*.jar \
            .

          # Faz login no ACR e envia a imagem
          az acr login --name ${{ env.ACR_NAME }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

      # ------------------------------------------------------
      # 4) Cria (se ainda não existir) o Log Analytics Workspace
      # ------------------------------------------------------
      - name: Create Log Analytics Workspace (if not exists)
        run: |
          az monitor log-analytics workspace create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --workspace-name ${{
                env.ENV_NAME
              }}-logs \
            --location ${{ env.LOCATION }}

      # ------------------------------------------------------
      # 5) Cria (se ainda não existir) o Container Apps Environment
      # ------------------------------------------------------
      - name: Create Container Apps Environment (if not exists)
        run: |
          if ! az containerapp env show \
               --name ${{ env.ENV_NAME }} \
               --resource-group ${{ env.RESOURCE_GROUP }} \
             > /dev/null 2>&1; then
            az containerapp env create \
              --name ${{ env.ENV_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --location ${{ env.LOCATION }} \
              --logs-workspace-name ${{
                  env.ENV_NAME
                }}-logs
          fi

      # ------------------------------------------------------
      # 6) Cria ou Atualiza o Container App, usando a nova imagem
      # ------------------------------------------------------
      - name: Create or Update Container App
        run: |
          if ! az containerapp show \
               --name ${{ env.CA_NAME }} \
               --resource-group ${{ env.RESOURCE_GROUP }} \
             > /dev/null 2>&1; then
            # Se não existir ainda, criamos do zero:
            az containerapp create \
              --name ${{ env.CA_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --environment ${{ env.ENV_NAME }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
              --ingress external \
              --target-port 8080 \
              --min-replicas 0 \
              --max-replicas 2 \
              --registry-server ${{ env.ACR_NAME }}.azurecr.io
          else
            # Se já existir, atualizamos apenas a imagem:
            az containerapp update \
              --name ${{ env.CA_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --environment ${{ env.ENV_NAME }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          fi
