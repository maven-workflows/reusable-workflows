name: Deploy to Container Apps

on:
  workflow_call:
    secrets:
      AZURE_CREDENTIALS:
        description: 'JSON do Service Principal para fazer login no Azure'
        required: true

env:
  ARTIFACT_NAME: "app-jar"
  RESOURCE_GROUP: "azure-for-github-actions"
  ACR_NAME: "ghactions"
  ENV_NAME: "ghactions-env"
  CA_NAME: "ghactions-ca"
  IMAGE_NAME: "demo-api"
  LOCATION: "eastus2"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # (passos anteriores: download do JAR, login no Azure, gerar Dockerfile, build & push etc.)
      # … (1) Download JAR
      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./app-jar

      # … (2) Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # … (3) Criar Dockerfile + Build & Push (conforme já configurado)
      - name: Criar Dockerfile
        run: |
          cat << 'EOF' > Dockerfile
          FROM openjdk:11-jre-slim
          COPY app-jar/*.jar /app.jar
          WORKDIR /
          EXPOSE 8080
          ENTRYPOINT ["java", "-jar", "/app.jar"]
          EOF

      - name: Build & Push Docker Image
        run: |
          docker build -f Dockerfile \
            -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            .
          az acr login --name ${{ env.ACR_NAME }}
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

      # --------------------------  
      # 4) PASSO CORRIGIDO: Criar Log Analytics Workspace (se não existir)
      # --------------------------
      - name: Create Log Analytics Workspace (if not exists)
        run: |
          # Tenta criar o workspace “ghactions-env-logs”; se já existir, não dá erro
          az monitor log-analytics workspace create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --workspace-name ${{ env.ENV_NAME }}-logs \
            --location ${{ env.LOCATION }}

      # --------------------------  
      # 5) Obter ID e Key do workspace criado
      # --------------------------
      - name: Get Log Analytics Workspace ID and Key
        id: get-logs-info
        run: |
          LOGWS_ID=$(az monitor log-analytics workspace show \
                       --resource-group ${{ env.RESOURCE_GROUP }} \
                       --workspace-name ${{ env.ENV_NAME }}-logs \
                       --query id -o tsv)
          LOGWS_KEY=$(az monitor log-analytics workspace get-shared-keys \
                        --resource-group ${{ env.RESOURCE_GROUP }} \
                        --workspace-name ${{ env.ENV_NAME }}-logs \
                        --query primarySharedKey -o tsv)

          echo "LOGWS_ID=$LOGWS_ID" >> "$GITHUB_OUTPUT"
          echo "LOGWS_KEY=$LOGWS_KEY" >> "$GITHUB_OUTPUT"

      # --------------------------  
      # 6) Criar (ou atualizar) o Container Apps Environment usando ID e KEY
      # --------------------------
      - name: Create or Update Container Apps Environment
        run: |
          # Verifica se o ambiente já existe:
          if ! az containerapp env show \
               --name ${{ env.ENV_NAME }} \
               --resource-group ${{ env.RESOURCE_GROUP }} \
             > /dev/null 2>&1; then

            # Se não existir, cria com o workspace existente:
            az containerapp env create \
              --name ${{ env.ENV_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --location ${{ env.LOCATION }} \
              --logs-workspace-id "${{ steps.get-logs-info.outputs.LOGWS_ID }}" \
              --logs-workspace-key "${{ steps.get-logs-info.outputs.LOGWS_KEY }}"
          else
            # Se já existe, apenas atualiza as configurações de log para usar esse workspace:
            az containerapp env update \
              --name ${{ env.ENV_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --logs-workspace-id "${{ steps.get-logs-info.outputs.LOGWS_ID }}" \
              --logs-workspace-key "${{ steps.get-logs-info.outputs.LOGWS_KEY }}"
          fi

      # --------------------------  
      # 7) Criar ou Atualizar o Container App propriamente dito
      # --------------------------
      - name: Create or Update Container App
        run: |
          if ! az containerapp show \
               --name ${{ env.CA_NAME }} \
               --resource-group ${{ env.RESOURCE_GROUP }} \
             > /dev/null 2>&1; then
            az containerapp create \
              --name ${{ env.CA_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --environment ${{ env.ENV_NAME }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
              --ingress external \
              --target-port 8080 \
              --min-replicas 0 \
              --max-replicas 2 \
              --registry-server ${{ env.ACR_NAME }}.azurecr.io
          else
            az containerapp update \
              --name ${{ env.CA_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --environment ${{ env.ENV_NAME }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          fi
