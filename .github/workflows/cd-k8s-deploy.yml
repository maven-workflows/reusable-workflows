name: Deploy to Azure Container Apps

on:
  push:
    branches:
      - main

env:
  ARTIFACT_NAME: "app-jar"
  RESOURCE_GROUP: "azure-for-github-actions"
  ACR_NAME: "ghactions"
  CONTAINER_APP_NAME: "ghactions-ca"
  IMAGE_NAME: "demo-api"
  LOCATION: "eastus2"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout do código-fonte
      - name: Checkout do código
        uses: actions/checkout@v3

      # Download do artifact JAR gerado em etapas anteriores
      - name: Baixar artifact JAR
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./app-jar

      # Login no Azure usando Service Principal
      - name: Login no Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Criação do Dockerfile dinamicamente
      - name: Criar Dockerfile
        run: |
          cat <<EOF > Dockerfile
          FROM openjdk:11-jre-slim
          COPY app-jar/*.jar /app.jar
          WORKDIR /
          EXPOSE 8080
          ENTRYPOINT ["java", "-jar", "/app.jar"]
          EOF

      # Build e push da imagem Docker para o ACR
      - name: Build e Push da imagem Docker
        run: |
          IMAGE_TAG="${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          docker build -t $IMAGE_TAG .
          az acr login --name ${{ env.ACR_NAME }}
          docker push $IMAGE_TAG

      # Implantação no Azure Container App
      - name: Implantar no Azure Container App
        run: |
          IMAGE_TAG="${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          az containerapp update \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image $IMAGE_TAG
